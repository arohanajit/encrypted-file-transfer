#!/usr/bin/env python3

# Author: <YOUR_NAME_HERE>
# CSC 574 Mini-Project 1
# eft-dh: encrypted file transfer using DH key exchange

# Import additional modules as needed.
import argparse
import sys
import os
import socket
import struct
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
import random
import binascii
import os
import hashlib

# Diffie-Hellman Parameters
g=2
p=0x00cc81ea8157352a9e9a318aac4e33ffba80fc8da3373fb44895109e4c3ff6cedcc55c02228fccbd551a504feb4346d2aef47053311ceaba95f6c540b967b9409e9f0502e598cfc71327c5a455e2e807bede1e0b7d23fbea054b951ca964eaecae7ba842ba1fc6818c453bf19eb9c5c86e723e69a210d4b72561cab97b3fb3060b


def print_debug(*objects, sep=' ', end='\n', file=sys.stderr, flush=False):
    """
    When stdout is redirected, messages cannot be printed to stdout as they will be written to the file, not the console.
    Use this function to print debug messages to stderr.
    It supports all optional arguments of the print function, with the exception that file is overridden to stderr.

    IMPORTANT: This function cannot be used to display debug messages in the autograder environment.

    :param objects: Any non-keyword argument that can be converted to string.
    :param sep: String to separate objects. [Default: Space]
    :param end: String to append to the end. [Default: Newline]
    :param file: Not used. Overridden to sys.stderr.
    :param flush: Forcibly flush the stream.
    """

    print(objects, sep=sep, end=end, file=sys.stderr, flush=flush)


def read_file(buffer_len):
    """
    Wrapper function for reading from stdin.
    Use < to redirect a file to stdin.

    :param buffer_len: Number of bytes to read at once.
    :return: Raw bytes or None if buffer is empty.
    """

    return sys.stdin.buffer.read(buffer_len)


def write_file(data):
    """
    Wrapper function for writing a file to stdout.
    Use > to redirect stdout to a file.

    :param data: raw bytes.
    """

    sys.stdout.buffer.write(data)


def num_to_x_byte_str(num,numbytes):
    """
    Converts int to numbytes-byte string with a bunch of 0s in front of it
    IMPORTANT: This function should NOT be used when creating the string representation of the output of the
                diffie-hellman key agreement procedure before hashing it. Use create_final_dh_string instead.


    :param num: The number to be encoded.
    :param numbytes:  The total number of bytes the string should take.
    :return: decimal representation of num padded with zeros.
    """

    num = str(num)
    return (numbytes-len(num))*'0' + num


def create_final_dh_string(new_key):
    """
    Process the output of the diffie_hellman key into a hex string for use in generating the session key.
    IMPORTANT: This function should NOT be used when creating the string representation of A and B.
               Use num_to_x_byte_str instead.

    :param new_key: Diffie-Hellman Key
    :return: Hex string representation of new_key.
    """

    # Post-process the created key
    new_key_str = '%x' % new_key
    return new_key_str.encode('utf-8')

def generate_dh_key():
    # Generate Diffie-Hellman private key and public key
    p = int("00cc81ea8157352a9e9a318aac4e33ffba80fc8da3373fb44895109e4c3ff6cedcc55c02228fccbd551a504feb4346d2aef47053311ceaba95f6c540b967b9409e9f0502e598cfc71327c5a455e2e807bede1e0b7d23fbea054b951ca964eaecae7ba842ba1fc6818c453bf19eb9c5c86e723e69a210d4b72561cab97b3fb3060b", 16)
    g = 2
    private_key = int.from_bytes(get_random_bytes(32), byteorder='big')
    public_key = pow(g, private_key, p)
    return private_key, public_key
    


def server(port):
    """
    Server Code

    :param port: Port number to listen on.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("127.0.0.1",port))
        s.listen()
        conn,addr = s.accept()
        a = random.randrange(1,p-1)
        A = pow(g,a,p)
        A = (str(A).zfill(384)).encode('utf-8')
        conn.send(A)
        B = int(conn.recv(384).decode('utf-8'))
        key = '%x' % pow(B,a,p)
        hash = hashlib.new('sha256')
        hash.update(key.encode('utf-8'))
        sess_key = hash.digest()[:32]
        while True:
            head = conn.recv(2)
            if len(head)<2:
                return b''
            length = struct.unpack('>H',head)[0]
            encrypt_data = conn.recv(length)
            nonce = encrypt_data[:16]
            tag = encrypt_data[16:32]
            ciphertext = encrypt_data[32:]
            cipher = AES.new(sess_key, AES.MODE_GCM, nonce)
            try:
                decrypt_data = cipher.decrypt_and_verify(ciphertext,tag)
            except Exception as e:
                sys.stderr.write("Error: integrity check failed.\n")
                return
            data = unpad(decrypt_data,16, style='pkcs7')
            if not data:
                break
            write_file(data)





def client(addr, port):
    """
    Client Code

    :param addr: IP address of the server.
    :param port: Port to connect to.
    :return:
    """
    global g,p
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((addr, port))
        a = random.randrange(1,p-1)
        A = pow(g,a,p)
        A = (str(A).zfill(384)).encode('utf-8')
        s.send(A)
        B = int(s.recv(384).decode('utf-8'))
        key = '%x' % pow(B,a,p)
        hash = hashlib.new('sha256')
        hash.update(key.encode('utf-8'))
        sess_key = hash.digest()[:32]
        while True:
            data = read_file(1024)
            if not data:
                break
            cipher = AES.new(sess_key, AES.MODE_GCM)
            nonce = cipher.nonce
            ciphertext, tag = cipher.encrypt_and_digest(pad(data,16,style='pkcs7'))
            length = len(ciphertext) + len(nonce) + len(tag)
            head = struct.pack('>H',length)
            data = head + nonce + tag + ciphertext 
            s.send(data)

        


        


def parse_args():
    """
    Command Line Argument Parser

    :return: Argparse Namespace of identified command line arguments.
    """
    # Configure the argument parser.
    parser = argparse.ArgumentParser(description='Encrypted File Transfer using Diffie-Hellman Key Exchange Protocol')
    server_group = parser.add_argument_group('server_group', 'Server mode options')
    server_group.add_argument('-l', dest='server_port', action='store', help='Server mode with port')
    client_group = parser.add_argument_group('client_group', 'Client mode options')
    client_group.add_argument('client_ip_address', nargs='?')
    client_group.add_argument('client_port', nargs='?')

    # Parse arguments.
    args = parser.parse_args()

    # Check if arguments are valid.
    args_ok = ((args.server_port is None) and (args.client_ip_address is not None and args.client_port is not None)) or \
              ((args.server_port is not None) and (args.client_ip_address is None and args.client_port is None))

    # If not, show usage message and exit.
    if not args_ok:
        print("./eft-dh [-l SERVER_PORT > OUTPUT FILE] [CLIENT_IP_ADDRESS CLIENT_PORT < INPUT_FILE]")
        sys.exit(0)

    # Otherwise return the args.
    return args


def main():
    # Parse Arguments
    args = parse_args()

    # Launch the client or server depending on the arguments received.
    if args.server_port is not None:
        port = int(args.server_port)
        server(port)
    else:
        addr = args.client_ip_address
        port = int(args.client_port)
        client(addr, port)


if __name__ == "__main__":
    main()
